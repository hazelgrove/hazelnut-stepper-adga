open import Data.String using (String)
open import Data.Nat using (โ; _+_; _โค_; _>_)
open import Data.Product using (_,_; _ร_; projโ; projโ)
open import Data.Sum using (_โ_)
open import Relation.Nullary using (Dec; yes; no; ยฌ_; _ร-dec_)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_โก_; refl; cong; _โข_)
open import Function using (_โ_)

data Act : Set where
  eval : Act
  pause : Act

data Gas : Set where
  ๐ : Gas
  โ : Gas

Id : Set
Id = String

data Pat : Set
data Exp : Set

infix 5 ฦ_โ_
infix 5 ฯ_โ_
infix 5 ฮด_โ_
infixl 7 _`+_
infixl 8 _`ยท_
infix 9 #_
infix 9 `_

data Pat where
  $e     : Pat
  $v     : Pat
  `_     : Id โ Pat
  ฦ_โ_  : Id โ Exp โ Pat
  _`ยท_   : Pat โ Pat โ Pat
  #_     : โ โ Pat
  _`+_   : Pat โ Pat โ Pat

data Exp where
  `_     : Id โ Exp
  ฦ_โ_  : Id โ Exp โ Exp
  _`ยท_   : Exp โ Exp โ Exp
  #_     : โ โ Exp
  _`+_   : Exp โ Exp โ Exp
  ฯ_โ_  : Pat ร Act ร Gas โ Exp โ Exp
  ฮด_โ_  : Act ร Gas ร โ   โ Exp โ Exp


data Value : Exp โ Set where
  V-# : โ {n : โ}
    โ Value (# n)

  V-ฦ : โ {x L}
    โ Value (ฦ x โ L)

value? : โ (e : Exp) โ Dec (Value e)
value? (` x) = no ฮป ()
value? (ฦ x โ e) = yes V-ฦ
value? (e `ยท eโ) = no (ฮป ())
value? (# x) = yes V-#
value? (e `+ eโ) = no (ฮป ())
value? (ฯ x โ e) = no (ฮป ())
value? (ฮด x โ e) = no (ฮป ())

data Normal : Exp โ Set where
  N-` : โ {x} โ Normal (` x)
  N-ฦ : โ {x e} โ Normal e โ Normal (ฦ x โ e)
  N-ยท : โ {eโ eโ} โ Normal eโ โ Normal eโ โ Normal (eโ `ยท eโ)
  N-# : โ {n} โ Normal (# n)
  N-+ : โ {eโ eโ} โ Normal eโ โ Normal eโ โ Normal (eโ `+ eโ)

data Filter : Exp โ Set where
  F-ฮฆ : โ {pag e}
    โ Filter (ฯ pag โ e)

  F-ฮ : โ {agl e}
    โ Filter (ฮด agl โ e)

filter? : โ (e : Exp) โ Dec (Filter e)
filter? (` x) = no ฮป ()
filter? (ฦ x โ e) = no ฮป ()
filter? (e `ยท eโ) = no ฮป ()
filter? (# x) = no ฮป ()
filter? (e `+ eโ) = no ฮป ()
filter? (ฯ x โ e) = yes F-ฮฆ
filter? (ฮด x โ e) = yes F-ฮ

data PatVal : Pat โ Set where
  PV-# : โ {n}
    โ PatVal (# n)

  PV-ฦ : โ {x e}
    โ PatVal (ฦ x โ e)

strip : Exp โ Exp
strip (` x) = ` x
strip (ฦ x โ L) = ฦ x โ (strip L)
strip (L `ยท M) = (strip L) `ยท (strip M)
strip (# n) = # n
strip (L `+ M) = (strip L) `+ (strip M)
strip (ฯ x โ L) = strip L
strip (ฮด x โ L) = strip L

strip-normal : โ (e : Exp) โ Normal (strip e)
strip-normal (` x) = N-`
strip-normal (ฦ x โ e) = N-ฦ (strip-normal e)
strip-normal (eโ `ยท eโ) = N-ยท (strip-normal eโ) (strip-normal eโ)
strip-normal (# x) = N-#
strip-normal (eโ `+ eโ) = N-+ (strip-normal eโ) (strip-normal eโ)
strip-normal (ฯ x โ e) = strip-normal e
strip-normal (ฮด x โ e) = strip-normal e

patternize : Exp โ Pat
patternize (` x) = ` x
patternize (ฦ x โ L) = ฦ x โ L
patternize (L `ยท M) = (patternize L) `ยท (patternize M)
patternize (# n) = # n
patternize (L `+ M) = (patternize L) `+ (patternize M)
patternize (ฯ x โ L) = patternize L
patternize (ฮด x โ L) = patternize L

_โจ_:=_โฉ : Pat โ Id โ Exp โ Pat
_[_:=_] : Exp โ Id โ Exp โ Exp

_โจ_:=_โฉ $e x V = $e
_โจ_:=_โฉ $v x V = $v
_โจ_:=_โฉ (` x) y V with (x Data.String.โ y)
... | yes _ = patternize V
... | no  _ = (` x)
_โจ_:=_โฉ (ฦ x โ L) y V with (x Data.String.โ y)
... | yes _ = (ฦ x โ L)
... | no  _ = (ฦ x โ (L [ y := V ]))
_โจ_:=_โฉ (L `ยท M) x V = (L โจ x := V โฉ) `ยท (M โจ x := V โฉ)
_โจ_:=_โฉ (# n) x V = # n
_โจ_:=_โฉ (L `+ M) x V = (L โจ x := V โฉ) `+ (M โจ x := V โฉ)

_[_:=_] (` x) y V with (x Data.String.โ y)
... | yes _ = V
... | no  _ = (` x)
_[_:=_] (ฦ x โ L) y V with (x Data.String.โ y)
... | yes _ = (ฦ x โ L)
... | no  _ = (ฦ x โ (L [ y := V ]))
_[_:=_] (L `ยท M) x V = (L [ x := V ]) `ยท (M [ x := V ])
_[_:=_] (# n) x V = # n
_[_:=_] (L `+ M) x V = (L [ x := V ]) `+ (M [ x := V ])
_[_:=_] (ฯ (p , a , g) โ L) y V = ฯ (p โจ y := V โฉ) , a , g โ L [ y := V ]
_[_:=_] (ฮด x โ L) y V = ฮด x โ L [ y := V ]


infix 4 _โณ_

data _โณ_ : Pat โ Exp โ Set where
  M-E : โ {e}
    โ $e โณ e

  M-V : โ {v}
    โ Value v
    โ $v โณ v

  M-ยท : โ {pโ pแตฃ eโ eแตฃ}
    โ pโ โณ eโ
    โ pแตฃ โณ eแตฃ
    โ (pโ `ยท pแตฃ) โณ (eโ `ยท eแตฃ)

  M-+ : โ {pโ pแตฃ eโ eแตฃ}
    โ pโ โณ eโ
    โ pแตฃ โณ eแตฃ
    โ (pโ `+ pแตฃ) โณ (eโ `+ eแตฃ)

  M-ฦ : โ {x eโ y eโ}
    โ (strip (ฦ x โ eโ)) โก (strip (ฦ y โ eโ))
    โ (ฦ x โ eโ) โณ (ฦ y โ eโ)

  M-# : โ {n}
    โ (# n) โณ (# n)

infix 0 _โโ_

data _โโ_ : Exp โ Exp โ Set where
  ฮพ-ยทโ : โ {eโ eแตฃ eโโฒ}
    โ eโ โโ eโโฒ
    โ eโ `ยท eแตฃ โโ eโโฒ `ยท eแตฃ

  ฮพ-ยทแตฃ : โ {eแตฃ vโ eแตฃโฒ}
    โ Value vโ
    โ eแตฃ โโ eแตฃโฒ
    โ vโ `ยท eแตฃ โโ vโ `ยท eแตฃโฒ

  ฮฒ-ยท : โ {vแตฃ x eโ}
    โ Value vแตฃ
    โ (ฦ x โ eโ) `ยท vแตฃ โโ (eโ [ x := vแตฃ ])

  ฮพ-+โ : โ {eโ eแตฃ eโโฒ}
    โ eโ โโ eโโฒ
    โ eโ `+ eแตฃ โโ eโโฒ `+ eแตฃ

  ฮพ-+แตฃ : โ {eแตฃ vโ eแตฃโฒ}
    โ Value vโ
    โ eแตฃ โโ eแตฃโฒ
    โ vโ `+ eแตฃ โโ vโ `+ eแตฃโฒ

  ฮฒ-+ : โ {vแตฃ x eโ}
    โ Value vแตฃ
    โ (ฦ x โ eโ) `+ vแตฃ โโ (eโ [ x := vแตฃ ])

  ฮพ-ฯ : โ {pag e eโฒ}
    โ e โโ eโฒ
    โ (ฯ pag โ e) โโ (ฯ pag โ eโฒ)

  ฮฒ-ฯ : โ {pag v}
    โ Value v
    โ (ฯ pag โ v) โโ v

  ฮพ-ฮด : โ {agl e eโฒ}
    โ e โโ eโฒ
    โ (ฮด agl โ e) โโ (ฮด agl โ eโฒ)

  ฮฒ-ฮด : โ {agl v}
    โ Value v
    โ (ฯ agl โ v) โโ v

data Ctx : Set where
  โ     : Ctx
  _ยทโ_  : Ctx โ Exp โ Ctx
  _ยทแตฃ_  : Exp โ Ctx โ Ctx
  _+โ_  : Ctx โ Exp โ Ctx
  _+แตฃ_  : Exp โ Ctx โ Ctx
  ฯ_โ_ : Pat ร Act ร Gas โ Ctx โ Ctx
  ฮด_โ_ : Act ร Gas ร โ โ Ctx โ Ctx

data _โ_โจ_โฉ : Exp โ Ctx โ Exp โ Set where
  D-ฮฒ-` : โ {x}
    โ (` x) โ โ โจ (` x) โฉ

  D-ฮพ-ยทโ : โ {eโ eแตฃ โฐ eโโฒ}
    โ eโ โ โฐ โจ eโโฒ โฉ
    โ (eโ `ยท eแตฃ) โ (โฐ ยทโ eแตฃ) โจ eโโฒ โฉ

  D-ฮพ-ยทแตฃ : โ {eโ eแตฃ โฐ eแตฃโฒ}
    โ eแตฃ โ โฐ โจ eแตฃโฒ โฉ
    โ (eโ `ยท eแตฃ) โ (eโ ยทแตฃ โฐ) โจ eแตฃโฒ โฉ

  D-ฮฒ-ยท : โ {vโ vแตฃ โฐ}
    โ Value vโ
    โ Value vแตฃ
    โ (vโ `ยท vแตฃ) โ โฐ โจ vโ `ยท vแตฃ โฉ

  D-ฮพ-+โ : โ {eโ eแตฃ โฐ eโโฒ}
    โ eโ โ โฐ โจ eโโฒ โฉ
    โ (eโ `+ eแตฃ) โ (โฐ +โ eแตฃ) โจ eโโฒ โฉ

  D-ฮพ-+แตฃ : โ {eโ eแตฃ โฐ eแตฃโฒ}
    โ eแตฃ โ โฐ โจ eแตฃโฒ โฉ
    โ (eโ `+ eแตฃ) โ (eโ +แตฃ โฐ) โจ eแตฃโฒ โฉ

  D-ฮฒ-+ : โ {vโ vแตฃ โฐ}
    โ Value vโ
    โ Value vแตฃ
    โ (vโ `+ vแตฃ) โ โฐ โจ vโ `+ vแตฃ โฉ

  D-ฮพ-ฯ : โ {pag e โฐ eโฒ}
    โ e โ โฐ โจ eโฒ โฉ
    โ (ฯ pag โ e) โ (ฯ pag โ โฐ) โจ eโฒ โฉ

  D-ฮฒ-ฯ : โ {pag v โฐ}
    โ Value v
    โ (ฯ pag โ v) โ โฐ โจ ฯ pag โ v โฉ

  D-ฮพ-ฮด : โ {agl e โฐ eโฒ}
    โ e โ โฐ โจ eโฒ โฉ
    โ (ฮด agl โ e) โ (ฮด agl โ โฐ) โจ eโฒ โฉ

  D-ฮฒ-ฮด : โ {agl v โฐ}
    โ Value v
    โ (ฮด agl โ v) โ โฐ โจ ฮด agl โ v โฉ

data _โ_โจ_โฉ : Exp โ Ctx โ Exp โ Set where
  C-โ : โ {e}
    โ e โ โ โจ e โฉ

  C-ยทโ : โ {ฮตโ eแตฃ eโ e}
    โ eโ โ ฮตโ โจ e โฉ
    โ (eโ `ยท eแตฃ) โ (ฮตโ ยทโ eแตฃ) โจ e โฉ

  C-ยทแตฃ : โ {eโ ฮตแตฃ eแตฃ e}
    โ eแตฃ โ ฮตแตฃ โจ e โฉ
    โ (eโ `ยท eแตฃ) โ (eโ ยทแตฃ ฮตแตฃ) โจ e โฉ

  C-+โ : โ {ฮตโ eแตฃ eโ e}
    โ eโ โ ฮตโ โจ e โฉ
    โ (eโ `+ eแตฃ) โ (ฮตโ +โ eแตฃ) โจ e โฉ

  C-+แตฃ : โ {eโ ฮตแตฃ eแตฃ e}
    โ eแตฃ โ ฮตแตฃ โจ e โฉ
    โ (eโ `+ eแตฃ) โ (eโ +แตฃ ฮตแตฃ) โจ e โฉ

  C-ฯ : โ {pag ฮต e eโฒ}
    โ eโฒ โ ฮต โจ e โฉ
    โ (ฯ pag โ eโฒ) โ (ฯ pag โ ฮต) โจ e โฉ

  C-ฮด : โ {agl ฮต e eโฒ}
    โ eโฒ โ ฮต โจ e โฉ
    โ (ฮด agl โ eโฒ) โ (ฮด agl โ ฮต) โจ e โฉ

data _โข_โ_ : Pat ร Act ร Gas ร โ โ Exp โ Exp โ Set where
  I-V : โ {pagl v}
    โ Value v
    โ pagl โข v โ v

  I-`-โค : โ {p a g l x}
    โ p โณ (` x)
    โ (p , a , g , l) โข (` x) โ (ฮด (a , g , l) โ (` x))

  I-`-โฅ : โ {p a g l x}
    โ ยฌ (p โณ (` x))
    โ (p , a , g , l) โข (` x) โ (` x)

  I-ยท-โค : โ {p a g l eโ eแตฃ eโโฒ eแตฃโฒ}
    โ p โณ (eโ `ยท eแตฃ)
    โ (p , a , g , l) โข eโ โ eโโฒ
    โ (p , a , g , l) โข eแตฃ โ eแตฃโฒ
    โ (p , a , g , l) โข (eโ `ยท eแตฃ) โ (ฮด (a , g , l) โ (eโโฒ `ยท eแตฃโฒ))

  I-ยท-โฅ : โ {p a g l eโ eแตฃ eโโฒ eแตฃโฒ}
    โ ยฌ (p โณ (eโ `ยท eแตฃ))
    โ (p , a , g , l) โข eโ โ eโโฒ
    โ (p , a , g , l) โข eแตฃ โ eแตฃโฒ
    โ (p , a , g , l) โข (eโ `ยท eแตฃ) โ (eโโฒ `ยท eแตฃโฒ)

  I-+-โค : โ {p a g l eโ eแตฃ eโโฒ eแตฃโฒ}
    โ p โณ (eโ `+ eแตฃ)
    โ (p , a , g , l) โข eโ โ eโโฒ
    โ (p , a , g , l) โข eแตฃ โ eแตฃโฒ
    โ (p , a , g , l) โข (eโ `+ eแตฃ) โ (ฮด (a , g , l) โ (eโโฒ `+ eแตฃโฒ))

  I-+-โฅ : โ {p a g l eโ eแตฃ eโโฒ eแตฃโฒ}
    โ ยฌ (p โณ (eโ `+ eแตฃ))
    โ (p , a , g , l) โข eโ โ eโโฒ
    โ (p , a , g , l) โข eแตฃ โ eแตฃโฒ
    โ (p , a , g , l) โข (eโ `+ eแตฃ) โ (eโโฒ `+ eแตฃโฒ)

  I-ฮฆ : โ {pat act gas lvl p a g e eโฒ eโณ}
    โ (pat , act , gas , lvl) โข e โ eโฒ
    โ (p , a , g , โ.suc lvl) โข eโฒ โ eโณ
    โ (pat , act , gas , lvl) โข (ฯ (p , a , g) โ e) โ (ฯ (p , a , g) โ eโณ)

  I-ฮ : โ {pat act gas lvl a g l e eโฒ}
    โ (pat , act , gas , lvl) โข e โ eโฒ
    โ (pat , act , gas , lvl) โข (ฮด (a , g , l) โ e) โ (ฮด (a , g , l) โ eโฒ)

data _โข_โ_โฃ_ : Act ร โ โ Ctx โ Ctx โ Act โ Set where
  A-โ : โ {act lvl}
    โ (act , lvl) โข โ โ โ โฃ act

  A-ยท-l : โ {act lvl ฮตโ ฮตโโฒ eแตฃ actโฒ}
    โ (act , lvl) โข ฮตโ โ ฮตโโฒ โฃ actโฒ
    โ (act , lvl) โข (ฮตโ ยทโ eแตฃ) โ (ฮตโโฒ ยทโ eแตฃ) โฃ actโฒ

  A-ยท-r : โ {act lvl eโ ฮตแตฃ ฮตแตฃโฒ actโฒ}
    โ (act , lvl) โข ฮตแตฃ โ ฮตแตฃโฒ โฃ actโฒ
    โ (act , lvl) โข (eโ ยทแตฃ ฮตแตฃ) โ (eโ ยทแตฃ ฮตแตฃโฒ) โฃ actโฒ

  A-+-l : โ {act lvl ฮตโ ฮตโโฒ eแตฃ actโฒ}
    โ (act , lvl) โข ฮตโ โ ฮตโโฒ โฃ actโฒ
    โ (act , lvl) โข (ฮตโ +โ eแตฃ) โ (ฮตโโฒ +โ eแตฃ) โฃ actโฒ

  A-+-r : โ {act lvl eโ ฮตแตฃ ฮตแตฃโฒ actโฒ}
    โ (act , lvl) โข ฮตแตฃ โ ฮตแตฃโฒ โฃ actโฒ
    โ (act , lvl) โข (eโ +แตฃ ฮตแตฃ) โ (eโ +แตฃ ฮตแตฃโฒ) โฃ actโฒ

  A-ฮฆ : โ {act lvl ฮต ฮตโฒ actโฒ pag}
    โ (act , lvl) โข ฮต โ ฮตโฒ โฃ actโฒ
    โ (act , lvl) โข ฯ pag โ ฮต โ ฯ pag โ ฮตโฒ โฃ actโฒ

  A-ฮ-1-> : โ {act lvl ฮต ฮตโฒ actโฒ a l}
    โ l > lvl
    โ (a , l) โข ฮต โ ฮตโฒ โฃ actโฒ
    โ (act , lvl) โข ฮด (a , ๐ , l) โ ฮต โ ฮตโฒ โฃ actโฒ

  A-ฮ-1-โค : โ {act lvl ฮต ฮตโฒ actโฒ a l}
    โ l โค lvl
    โ (act , lvl) โข ฮต โ ฮตโฒ โฃ actโฒ
    โ (act , lvl) โข ฮด (a , ๐ , l) โ ฮต โ ฮตโฒ โฃ actโฒ

  A-ฮ-โ-> : โ {act lvl ฮต ฮตโฒ actโฒ a l}
    โ l > lvl
    โ (a , l) โข ฮต โ ฮตโฒ โฃ actโฒ
    โ (act , lvl) โข ฮด (a , โ , l) โ ฮต โ ฮด (a , โ , l) โ ฮตโฒ โฃ actโฒ

  A-ฮ-โ-โค : โ {act lvl ฮต ฮตโฒ actโฒ a l}
    โ l โค lvl
    โ (act , lvl) โข ฮต โ ฮตโฒ โฃ actโฒ
    โ (act , lvl) โข ฮด (a , โ , l) โ ฮต โ ฮด (a , โ , l) โ ฮตโฒ โฃ actโฒ

data _โข_โ_โจ_โฉโฃ_ : Pat ร Act ร Gas ร โ โ Exp โ Ctx โ Exp โ Act โ Set where
  T : โ {p a g l e eแตข ฮตโ ฮตโ eโ aโ}
    โ (p , a , g , l) โข e โ eแตข
    โ eแตข โ ฮตโ โจ eโ โฉ
    โ (a , l) โข ฮตโ โ ฮตโ โฃ aโ
    โ (p , a , g , l) โข e โ ฮตโ โจ eโ โฉโฃ aโ

data _โ*_ : Exp โ Exp โ Set where
  relf : โ {e}
    โ e โ* e

  ฮฆ/ฮ : โ {e eโฒ eโ ฮตโ aโ eโ eโ}
    โ e โ* eโฒ
    โ ($e , pause , ๐ , 0) โข eโฒ โ ฮตโ โจ eโ โฉโฃ aโ
    โ Filter eโ
    โ eโ โโ eโ
    โ eโ โ ฮตโ โจ eโ โฉ
    โ e โ* eโ

  skip : โ {e eโฒ eโ ฮตโ eโ eโ}
    โ e โ* eโฒ
    โ ($e , pause , ๐ , 0) โข eโฒ โ ฮตโ โจ eโ โฉโฃ eval
    โ eโ โโ eโ
    โ eโ โ ฮตโ โจ eโ โฉ
    โ e โ* eโ

infix 0 _โฅ_

data _โฅ_ : Exp โ Exp โ Set where
  pause : โ {e eโฒ eโ ฮตโ eโ eโ}
    โ e โ* eโฒ
    โ ($e , pause , ๐ , 0) โข eโฒ โ ฮตโ โจ eโ โฉโฃ pause
    โ eโ โโ eโ
    โ eโ โ ฮตโ โจ eโ โฉ
    โ e โฅ eโ

infixr 7 _โ_

data Typ : Set where
  _โ_ : Typ โ Typ โ Typ
  `โ   : Typ

infixl 5 _,_โถ_

data TypCtx : Set where
  โ     : TypCtx
  _,_โถ_ : TypCtx โ Id โ Typ โ TypCtx

infix 4 _โ_โถ_

data _โ_โถ_ : TypCtx โ Id โ Typ โ Set where
  Z : โ {ฮ x ฯ}
    โ ฮ , x โถ ฯ โ x โถ ฯ

  S : โ {ฮ xโ xโ ฯโ ฯโ}
    โ xโ โข xโ
    โ ฮ โ xโ โถ ฯโ
    โ ฮ , xโ โถ ฯโ โ xโ โถ ฯโ

infix 4 _โข_โถ_
infix 5 _โข_โป_

data _โข_โถ_ : TypCtx โ Exp โ Typ โ Set
data _โข_โป_ : TypCtx โ Pat โ Typ โ Set

data _โข_โถ_ where
  โข-` : โ {ฮ x ฯ}
    โ ฮ โ x โถ ฯ
    โ ฮ โข ` x โถ ฯ

  โข-ฦ : โ {ฮ x e ฯโ ฯโ}
    โ ฮ , x โถ ฯโ โข e โถ ฯโ
    โ ฮ โข (ฦ x โ e) โถ (ฯโ โ ฯโ)

  โข-ยท : โ {ฮ eโ eโ ฯโ ฯโ}
    โ ฮ โข eโ โถ (ฯโ โ ฯโ)
    โ ฮ โข eโ โถ ฯโ
    โ ฮ โข (eโ `ยท eโ) โถ ฯโ

  โข-+ : โ {ฮ eโ eโ ฯโ ฯโ}
    โ ฮ โข eโ โถ (ฯโ โ ฯโ)
    โ ฮ โข eโ โถ ฯโ
    โ ฮ โข (eโ `+ eโ) โถ ฯโ

  โข-# : โ {ฮ n}
    โ ฮ โข (# n) โถ `โ

  โข-ฯ : โ {ฮ p ฯโ ag e ฯโ}
    โ ฮ โข p โป ฯโ
    โ ฮ โข e โถ ฯโ
    โ ฮ โข ฯ (p , ag) โ e โถ ฯโ

  โข-ฮด : โ {ฮ agl e ฯ}
    โ ฮ โข e โถ ฯ
    โ ฮ โข ฮด agl โ e โถ ฯ

data _โข_โป_ where
  โข-e : โ {ฮ ฯ}
    โ ฮ โข $e โป ฯ

  โข-v : โ {ฮ ฯ}
    โ ฮ โข $v โป ฯ

  โข-` : โ {ฮ x ฯ}
    โ ฮ โ x โถ ฯ
    โ ฮ โข ` x โป ฯ

  โข-ฦ : โ {ฮ x e ฯโ ฯโ}
    โ ฮ , x โถ ฯโ โข e โถ ฯโ
    โ ฮ โข ฦ x โ e โป (ฯโ โ ฯโ)

  โข-ยท : โ {ฮ eโ eโ ฯโ ฯโ}
    โ ฮ โข eโ โป ฯโ โ ฯโ
    โ ฮ โข eโ โป ฯโ
    โ ฮ โข (eโ `ยท eโ) โป ฯโ

  โข-# : โ {ฮ n}
    โ ฮ โข (# n) โป `โ

  โข-+ : โ {ฮ eโ eโ}
    โ ฮ โข eโ โป `โ
    โ ฮ โข eโ โป `โ
    โ ฮ โข (eโ `+ eโ) โป `โ

ext : โ {ฮ ฮ}
  โ (โ {x A}     โ         ฮ โ x โถ A โ         ฮ โ x โถ A)
    -----------------------------------------------------
  โ (โ {x y A B} โ ฮ , y โถ B โ x โถ A โ ฮ , y โถ B โ x โถ A)
ext ฯ Z           =  Z
ext ฯ (S xโขy โx)  =  S xโขy (ฯ โx)

rename-exp : โ {ฮ ฮ}
  โ (โ {x A} โ ฮ โ x โถ A โ ฮ โ x โถ A)
  โ (โ {e A} โ ฮ โข e โถ A โ ฮ โข e โถ A)
rename-pat : โ {ฮ ฮ}
  โ (โ {x A} โ ฮ โ x โถ A โ ฮ โ x โถ A)
  โ (โ {e A} โ ฮ โข e โป A โ ฮ โข e โป A)

rename-exp ฯ (โข-` โ-x)   = โข-` (ฯ โ-x)
rename-exp ฯ (โข-ฦ โข-N)   = โข-ฦ (rename-exp (ext ฯ) โข-N)
rename-exp ฯ (โข-ยท eโ eโ) = โข-ยท (rename-exp ฯ eโ) (rename-exp ฯ eโ)
rename-exp ฯ (โข-+ eโ eโ) = โข-+ (rename-exp ฯ eโ) (rename-exp ฯ eโ)
rename-exp ฯ โข-#         = โข-#
rename-exp ฯ (โข-ฯ p e)   = โข-ฯ (rename-pat ฯ p) (rename-exp ฯ e)
rename-exp ฯ (โข-ฮด ฮ-โข)   = โข-ฮด (rename-exp ฯ ฮ-โข)

rename-pat ฯ โข-e         = โข-e
rename-pat ฯ โข-v         = โข-v
rename-pat ฯ (โข-` โ-x)   = โข-` (ฯ โ-x)
rename-pat ฯ (โข-ฦ xโขe)   = โข-ฦ (rename-exp (ext ฯ) xโขe)
rename-pat ฯ (โข-ยท eโ eโ) = โข-ยท (rename-pat ฯ eโ) (rename-pat ฯ eโ)
rename-pat ฯ โข-#         = โข-#
rename-pat ฯ (โข-+ eโ eโ) = โข-+ (rename-pat ฯ eโ) (rename-pat ฯ eโ)

-- alpha-type : โ {ฮ eโ eโ ฯ} โ eโ โกฮฑ eโ โ (ฮ โข eโ โถ ฯ) โ (ฮ โข eโ โถ ฯ)
-- alpha-type ฮฑ-` =
--   record
--     { to = Function.id
--     ; from = Function.id
--     ; to-cong = Function.id
--     ; from-cong = Function.id
--     ; inverse = Function.id , Function.id
--     }
-- alpha-type (ฮฑ-ฦ a) =
--   record
--     { to = ฮป { (โข-ฦ x) โ โข-ฦ (Function.Inverse.to (alpha-type {!a!}) {!!}) }
--     ; from = {!!} ; to-cong = {!!} ; from-cong = {!!} ; inverse = {!!} }
-- alpha-type (ฮฑ-ยท a aโ) = {!!}
-- alpha-type ฮฑ-# = {!!}
-- alpha-type (ฮฑ-+ a aโ) = {!!}
-- alpha-type (ฮฑ-ฮด x a) = {!!}
-- alpha-type (ฮฑ-ฯ x a) = {!!}

-- progress : {!!}
-- progress = {!!}

-- match-types : โ {ฮ p e ฯ} โ (ฮ โข e โถ ฯ) โ p โณ e โ (ฮ โข p โป ฯ)
-- match-types (โข-` x) M-E = โข-e
-- match-types (โข-ฦ _) M-E = โข-e
-- match-types (โข-ฦ _) (M-V _) = โข-v
-- match-types (โข-ฦ {x = xโ} xโขe) (M-ฦ (ฮฑ-ฦ x)) = โข-ฦ {!!}
-- match-types (โข-ยท x xโ) = {!!}
-- match-types (โข-+ x xโ) = {!!}
-- match-types โข-# = {!!}
-- match-types (โข-ฯ x xโ) = {!!}
-- match-types (โข-ฮด x) = {!!}
