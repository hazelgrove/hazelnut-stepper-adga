open import Base
open import Data.Nat using (โ) renaming (_โ_ to _โ-nat_)
open import Data.Product using (_ร_; _,_; projโ)
open import Relation.Nullary using (Dec; yes; no; _ร-dec_) renaming (mapโฒ to map-dec)

module Eq where
  import Relation.Binary.PropositionalEquality as Eq
  open Eq public using (_โก_; refl; cong)

  _โ-act_ : (aโ : Act) โ (aแตฃ : Act) โ Dec (aโ โก aแตฃ)
  โณ โ-act โณ = yes refl
  โณ โ-act โฅ = no (ฮป ())
  โฅ โ-act โณ = no (ฮป ())
  โฅ โ-act โฅ = yes refl

  _โ-gas_ : (gโ : Gas) โ (gแตฃ : Gas) โ Dec (gโ โก gแตฃ)
  ๐ โ-gas ๐ = yes refl
  ๐ โ-gas โ = no (ฮป ())
  โ โ-gas ๐ = no (ฮป ())
  โ โ-gas โ = yes refl

  _โ-exp_ : (eโ : Exp) โ (eแตฃ : Exp) โ Dec (eโ โก eแตฃ)
  _โ-pat_ : (pโ : Pat) โ (pแตฃ : Pat) โ Dec (pโ โก pแตฃ)

  _โ-filter_ : (fโ : Filter) โ (fแตฃ : Filter) โ Dec (fโ โก fแตฃ)
  (pโ , aโ , gโ) โ-filter (pแตฃ , aแตฃ , gแตฃ) with (pโ โ-pat pแตฃ) ร-dec (aโ โ-act aแตฃ) ร-dec (gโ โ-gas gแตฃ)
  (pโ , aโ , gโ) โ-filter (pแตฃ , aแตฃ , gแตฃ) | yes (refl , refl , refl) = yes refl
  (pโ , aโ , gโ) โ-filter (pแตฃ , aแตฃ , gแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl , refl) }

  _โ-residue_ : (fโ : Residue) โ (fแตฃ : Residue) โ Dec (fโ โก fแตฃ)
  (aโ , gโ , lโ) โ-residue (aแตฃ , gแตฃ , lแตฃ) with (aโ โ-act aแตฃ) ร-dec (gโ โ-gas gแตฃ) ร-dec (lโ โ-nat lแตฃ)
  (aโ , gโ , lโ) โ-residue (aแตฃ , gแตฃ , lแตฃ) | yes (refl , refl , refl) = yes refl
  (aโ , gโ , lโ) โ-residue (aแตฃ , gแตฃ , lแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl , refl) }

  (` x) โ-exp (` y) with x โ-nat y
  (` x) โ-exp (` y) | yes refl = yes refl
  (` x) โ-exp (` y) | no xโขy = no ฮป { refl โ xโขy refl }
  (` x) โ-exp (ฦ e) = no (ฮป ())
  (` x) โ-exp (l `ยท r) = no (ฮป ())
  (` x) โ-exp (# n) = no (ฮป ())
  (` x) โ-exp (l `+ r) = no (ฮป ())
  (` x) โ-exp ฯ f e = no (ฮป ())
  (` x) โ-exp ฮด r e = no (ฮป ())
  (ฦ e) โ-exp (` x) = no (ฮป ())
  (ฦ l) โ-exp (ฦ r) with l โ-exp r
  (ฦ l) โ-exp (ฦ r) | yes refl = yes refl
  (ฦ l) โ-exp (ฦ r) | no lโขr = no ฮป { refl โ lโขr refl }
  (ฦ e) โ-exp (l `ยท r) = no (ฮป ())
  (ฦ e) โ-exp (# n) = no (ฮป ())
  (ฦ e) โ-exp (l `+ r) = no (ฮป ())
  (ฦ _) โ-exp ฯ f e = no (ฮป ())
  (ฦ _) โ-exp ฮด r e = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp (` x) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp (ฦ e) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp (rโ `ยท rแตฃ) with (lโ โ-exp rโ) ร-dec (lแตฃ โ-exp rแตฃ)
  (lโ `ยท lแตฃ) โ-exp (lโ `ยท lแตฃ) | yes (refl , refl) = yes refl
  (lโ `ยท lแตฃ) โ-exp (rโ `ยท rแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl) }
  (lโ `ยท lแตฃ) โ-exp (# n) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp (rโ `+ rแตฃ) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp ฯ f e = no (ฮป ())
  (lโ `ยท lแตฃ) โ-exp ฮด r e = no (ฮป ())
  (# n) โ-exp (` x) = no (ฮป ())
  (# n) โ-exp (ฦ r) = no (ฮป ())
  (# n) โ-exp (r `ยท rโ) = no (ฮป ())
  (# n) โ-exp (# m) with n โ-nat m
  (# n) โ-exp (# m) | yes refl = yes refl
  (# n) โ-exp (# m) | no nโขm = no ฮป { refl โ nโขm refl }
  (# n) โ-exp (r `+ rโ) = no (ฮป ())
  (# n) โ-exp ฯ f r = no (ฮป ())
  (# n) โ-exp ฮด r rโ = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp (` x) = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp (ฦ e) = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp (rโ `ยท rแตฃ) = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp (# n) = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp (rโ `+ rแตฃ) with (lโ โ-exp rโ) ร-dec (lแตฃ โ-exp rแตฃ)
  (lโ `+ lแตฃ) โ-exp (lโ `+ lแตฃ) | yes (refl , refl) = yes refl
  (lโ `+ lแตฃ) โ-exp (rโ `+ rแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl) }
  (lโ `+ lแตฃ) โ-exp ฯ f e = no (ฮป ())
  (lโ `+ lแตฃ) โ-exp ฮด r e = no (ฮป ())
  ฯ f l โ-exp (` x) = no (ฮป ())
  ฯ f l โ-exp (ฦ r) = no (ฮป ())
  ฯ f l โ-exp (r `ยท rโ) = no (ฮป ())
  ฯ f l โ-exp (# n) = no (ฮป ())
  ฯ f l โ-exp (r `+ rโ) = no (ฮป ())
  ฯ fโ eโ โ-exp ฯ fแตฃ eแตฃ with (fโ โ-filter fแตฃ) ร-dec (eโ โ-exp eแตฃ)
  ฯ fโ eโ โ-exp ฯ fโ eโ | yes (refl , refl) = yes refl
  ฯ fโ eโ โ-exp ฯ fแตฃ eแตฃ | no lโขr = no ฮป { refl โ lโขr (refl , refl) }
  ฯ f l โ-exp ฮด r rโ = no (ฮป ())
  ฮด r eโ โ-exp (` x) = no (ฮป ())
  ฮด r eโ โ-exp (ฦ eแตฃ) = no (ฮป ())
  ฮด r eโ โ-exp (eแตฃ `ยท eแตฃโ) = no (ฮป ())
  ฮด r eโ โ-exp (# n) = no (ฮป ())
  ฮด r eโ โ-exp (eแตฃ `+ eแตฃโ) = no (ฮป ())
  ฮด r eโ โ-exp ฯ f eแตฃ = no (ฮป ())
  ฮด rโ eโ โ-exp ฮด rแตฃ eแตฃ with (rโ โ-residue rแตฃ) ร-dec (eโ โ-exp eแตฃ)
  ฮด rโ eโ โ-exp ฮด rแตฃ eแตฃ | yes (refl , refl) = yes refl
  ฮด rโ eโ โ-exp ฮด rแตฃ eแตฃ | no lโขr = no (ฮป { refl โ lโขr (refl , refl) })

  $e โ-pat $e = yes refl
  $e โ-pat $v = no (ฮป ())
  $e โ-pat (` x) = no (ฮป ())
  $e โ-pat (ฦ e) = no (ฮป ())
  $e โ-pat (pแตฃ `ยท pแตฃโ) = no (ฮป ())
  $e โ-pat (# n) = no (ฮป ())
  $e โ-pat (pแตฃ `+ pแตฃโ) = no (ฮป ())
  $v โ-pat $e = no (ฮป ())
  $v โ-pat $v = yes refl
  $v โ-pat (` x) = no (ฮป ())
  $v โ-pat (ฦ e) = no (ฮป ())
  $v โ-pat (pแตฃ `ยท pแตฃโ) = no (ฮป ())
  $v โ-pat (# n) = no (ฮป ())
  $v โ-pat (pแตฃ `+ pแตฃโ) = no (ฮป ())
  (` x) โ-pat $e = no (ฮป ())
  (` x) โ-pat $v = no (ฮป ())
  (` x) โ-pat (` y) with x โ-nat y
  (` x) โ-pat (` y) | yes refl = yes refl
  (` x) โ-pat (` y) | no xโขy = no (ฮป { refl โ xโขy refl })
  (` x) โ-pat (ฦ e) = no (ฮป ())
  (` x) โ-pat (pแตฃ `ยท pแตฃโ) = no (ฮป ())
  (` x) โ-pat (# n) = no (ฮป ())
  (` x) โ-pat (pแตฃ `+ pแตฃโ) = no (ฮป ())
  (ฦ e) โ-pat $e = no (ฮป ())
  (ฦ e) โ-pat $v = no (ฮป ())
  (ฦ e) โ-pat (` x) = no (ฮป ())
  (ฦ eโ) โ-pat (ฦ eแตฃ) with eโ โ-exp eแตฃ
  (ฦ eโ) โ-pat (ฦ eแตฃ) | yes refl = yes refl
  (ฦ eโ) โ-pat (ฦ eแตฃ) | no lโขr = no ฮป { refl โ lโขr refl }
  (ฦ e) โ-pat (pแตฃ `ยท pแตฃโ) = no (ฮป ())
  (ฦ e) โ-pat (# n) = no (ฮป ())
  (ฦ e) โ-pat (pแตฃ `+ pแตฃโ) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat $e = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat $v = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat (` x) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat (ฦ e) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat (rโ `ยท rแตฃ) with (lโ โ-pat rโ) ร-dec (lแตฃ โ-pat rแตฃ)
  (lโ `ยท lแตฃ) โ-pat (lโ `ยท lแตฃ) | yes (refl , refl) = yes refl
  (lโ `ยท lแตฃ) โ-pat (rโ `ยท rแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl) }
  (lโ `ยท lแตฃ) โ-pat (# n) = no (ฮป ())
  (lโ `ยท lแตฃ) โ-pat (rโ `+ rแตฃ) = no (ฮป ())
  (# n) โ-pat $e = no (ฮป ())
  (# n) โ-pat $v = no (ฮป ())
  (# n) โ-pat (` x) = no (ฮป ())
  (# n) โ-pat (ฦ e) = no (ฮป ())
  (# n) โ-pat (pแตฃ `ยท pแตฃโ) = no (ฮป ())
  (# n) โ-pat (# m) with n โ-nat m
  (# n) โ-pat (# m) | yes refl = yes refl
  (# n) โ-pat (# m) | no nโขm = no ฮป { refl โ nโขm refl }
  (# n) โ-pat (pแตฃ `+ pแตฃโ) = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat $e = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat $v = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat (` x) = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat (ฦ e) = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat (rโ `ยท rแตฃ) = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat (# n) = no (ฮป ())
  (lโ `+ lแตฃ) โ-pat (rโ `+ rแตฃ) with (lโ โ-pat rโ) ร-dec (lแตฃ โ-pat rแตฃ)
  (lโ `+ lแตฃ) โ-pat (rโ `+ rแตฃ) | yes (refl , refl) = yes refl
  (lโ `+ lแตฃ) โ-pat (rโ `+ rแตฃ) | no lโขr = no ฮป { refl โ lโขr (refl , refl) }
